const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
});

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Content-Type': 'application/json',
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  const client = await pool.connect();

  try {
    let results = [];

    // 1. Criar uma notifica√ß√£o de teste para deletar
    results.push('üß™ Criando notifica√ß√£o de teste para deletar...');
    const createResult = await client.query(`
      INSERT INTO notifications (user_id, title, message, type, read)
      VALUES (1, 'üóëÔ∏è Teste de Dele√ß√£o', 'Esta notifica√ß√£o ser√° deletada para testar a funcionalidade.', 'test', false)
      RETURNING id, title
    `);
    
    const testNotificationId = createResult.rows[0].id;
    results.push(`‚úÖ Notifica√ß√£o de teste criada com ID: ${testNotificationId}`);

    // 2. Verificar se a notifica√ß√£o existe
    const checkBefore = await client.query(`
      SELECT COUNT(*) FROM notifications WHERE id = $1
    `, [testNotificationId]);
    results.push(`üìä Notifica√ß√£o existe antes da dele√ß√£o: ${checkBefore.rows[0].count === '1' ? 'Sim' : 'N√£o'}`);

    // 3. Testar DELETE via SQL direto
    const deleteResult = await client.query(`
      DELETE FROM notifications 
      WHERE id = $1
      RETURNING id, title
    `, [testNotificationId]);

    if (deleteResult.rows.length > 0) {
      results.push(`‚úÖ DELETE funcionou! Notifica√ß√£o ${deleteResult.rows[0].id} removida`);
    } else {
      results.push('‚ùå DELETE n√£o funcionou - nenhuma linha afetada');
    }

    // 4. Verificar se a notifica√ß√£o foi realmente deletada
    const checkAfter = await client.query(`
      SELECT COUNT(*) FROM notifications WHERE id = $1
    `, [testNotificationId]);
    results.push(`üìä Notifica√ß√£o existe ap√≥s dele√ß√£o: ${checkAfter.rows[0].count === '1' ? 'Sim' : 'N√£o'}`);

    // 5. Contar total de notifica√ß√µes
    const totalCount = await client.query('SELECT COUNT(*) FROM notifications');
    results.push(`üìà Total de notifica√ß√µes no banco: ${totalCount.rows[0].count}`);

    // 6. Criar uma nova notifica√ß√£o de teste para testar via API
    results.push('üîó Criando nova notifica√ß√£o para testar via endpoint API...');
    const newTestResult = await client.query(`
      INSERT INTO notifications (user_id, title, message, type, read)
      VALUES (1, 'üåê Teste DELETE via API', 'Use DELETE /.netlify/functions/notifications/{id}/ para deletar esta notifica√ß√£o.', 'info', false)
      RETURNING id, title
    `);
    
    const apiTestId = newTestResult.rows[0].id;
    results.push(`‚úÖ Nova notifica√ß√£o criada para teste API: ID ${apiTestId}`);
    results.push(`üîó Para testar: DELETE /.netlify/functions/notifications/${apiTestId}/`);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        message: 'Teste de DELETE conclu√≠do!',
        test_notification_deleted: testNotificationId,
        api_test_notification_created: apiTestId,
        results: results,
        instructions: [
          `1. Teste via DevTools: DELETE /.netlify/functions/notifications/${apiTestId}/`,
          '2. Ou use o bot√£o de deletar no frontend',
          '3. Verifique se a notifica√ß√£o desaparece da lista'
        ]
      })
    };

  } catch (error) {
    console.error('Erro no teste de DELETE:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: 'Erro no teste de DELETE',
        details: error.message
      })
    };
  } finally {
    client.release();
  }
};
